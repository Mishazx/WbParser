import aiohttp
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from config import API_URL, HEADERS, logger
from keyboards import main_keyboard, frequency_keyboard, back_to_menu_keyboard

class Form(StatesGroup):
    waiting_for_artikul = State()
    waiting_for_subscription_artikul = State()
    waiting_for_frequency = State()
    waiting_for_unsubscribe = State()

async def show_main_menu(message: types.Message, text: str = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
    await message.answer(text, reply_markup=main_keyboard)

async def menu_command(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_main_menu(message, "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")

async def send_welcome(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    await show_main_menu(message, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

async def help_command(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/unsubscribe - –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä

üì± –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:
‚Ä¢ üì¶ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ - –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ –Ω–∞–ª–∏—á–∏–µ
‚Ä¢ üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–æ–≤–∞—Ä - –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
‚Ä¢ üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
‚Ä¢ ‚ùì –ü–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

‚ÑπÔ∏è –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
"""
    await message.answer(help_text, reply_markup=main_keyboard)

async def process_buttons(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {message.text}")
    
    if message.text == "üì¶ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:", reply_markup=back_to_menu_keyboard)
        await state.set_state(Form.waiting_for_artikul)
    elif message.text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–æ–≤–∞—Ä":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=back_to_menu_keyboard)
        await state.set_state(Form.waiting_for_subscription_artikul)
    elif message.text == "üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏":
        await process_my_subscriptions(message)

async def process_my_subscriptions(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    chat_id = str(message.chat.id)
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è chat_id: {chat_id}")
    
    async with aiohttp.ClientSession() as session:
        url = f"{API_URL}/subscriptions/user/{chat_id}"
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –∫: {url}")
        
        try:
            async with session.get(url, headers=HEADERS) as response:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {response.status}")
                
                if response.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}")
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    await show_main_menu(message)
                    return
                
                subscriptions = await response.json()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: {subscriptions}")
                
                if not subscriptions:
                    await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
                    await show_main_menu(message)
                    return

                subscription_info = []
                for sub in subscriptions:
                    artikul = sub["artikul"]
                    try:
                        async with session.post(
                            f"{API_URL}/products",
                            headers=HEADERS,
                            json={"artikul": artikul}
                        ) as product_response:
                            if product_response.status == 200:
                                product = await product_response.json()
                                subscription_info.append(
                                    f"üì¶ {product.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}\n"
                                    f"üìé –ê—Ä—Ç–∏–∫—É–ª: {artikul}\n"
                                    f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {product.get('price', '–ù/–î')} ‚ÇΩ\n"
                                    f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.get('total_quantity', '–ù/–î')} —à—Ç.\n"
                                    f"üîó https://www.wildberries.ru/catalog/{artikul}/detail.aspx\n"
                                )
                            else:
                                subscription_info.append(
                                    f"üì¶ –¢–æ–≤–∞—Ä {artikul}\n"
                                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ\n"
                                )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–≤–∞—Ä–∞ {artikul}: {e}")
                        subscription_info.append(
                            f"üì¶ –¢–æ–≤–∞—Ä {artikul}\n"
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
                        )

                if subscription_info:
                    message_text = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n" + "\n".join(subscription_info)
                    message_text += "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unsubscribe"
                    await message.answer(message_text)
                else:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
                await show_main_menu(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await show_main_menu(message)

async def return_to_menu(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
    await show_main_menu(message)

async def process_artikul(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞"""
    if message.text == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await return_to_menu(message, state)
        return

    artikul = message.text
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ: {artikul}")
    await message.answer(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {artikul}")

    async with aiohttp.ClientSession() as session:
        url = f"{API_URL}/products"
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –∫: {url}")
        
        try:
            async with session.post(url, headers=HEADERS, json={"artikul": artikul}) as response:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ: {data}")
                    
                    product_info = (
                        f"üì¶ –¢–æ–≤–∞—Ä: {data.get('name')}\n"
                        f"üìé –ê—Ä—Ç–∏–∫—É–ª: {data.get('artikul')}\n"
                        f"üí∞ –¶–µ–Ω–∞: {data.get('price')} ‚ÇΩ\n"
                        f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {data.get('rating')}\n"
                        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data.get('total_quantity')} —à—Ç.\n"
                        f"üîó –°—Å—ã–ª–∫–∞: https://www.wildberries.ru/catalog/{data.get('artikul')}/detail.aspx"
                    )

                    link = f"https://www.wildberries.ru/catalog/{data.get('artikul')}/detail.aspx"
                    builder = InlineKeyboardBuilder()
                    builder.add(InlineKeyboardButton(
                        text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Wildberries",
                        url=link
                    ))

                    await message.answer(product_info, reply_markup=builder.as_markup())
                elif response.status == 404:
                    await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}")
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–≤–∞—Ä–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await return_to_menu(message, state)

async def process_subscription_artikul(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    if message.text == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await return_to_menu(message, state)
        return

    artikul = message.text
    await state.update_data(artikul=artikul)
    
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{API_URL}/products", headers=HEADERS, json={"artikul": artikul}) as response:
            if response.status == 404:
                await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                await state.clear()
                await show_main_menu(message)
                return
            elif response.status != 200:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.clear()
                await show_main_menu(message)
                return
            
            data = await response.json()
            await message.answer(
                f"–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω:\n"
                f"üì¶ {data.get('name')}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:",
                reply_markup=frequency_keyboard
            )
            await state.set_state(Form.waiting_for_frequency)

async def process_frequency(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    if message.text == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await return_to_menu(message, state)
        return

    frequency_map = {
        "1 –º–∏–Ω—É—Ç–∞": 1,
        "30 –º–∏–Ω—É—Ç": 30,
        "1 —á–∞—Å": 60,
        "3 —á–∞—Å–∞": 180,
        "6 —á–∞—Å–æ–≤": 360,
        "12 —á–∞—Å–æ–≤": 720,
        "24 —á–∞—Å–∞": 1440
    }

    if message.text not in frequency_map:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    frequency = frequency_map[message.text]
    data = await state.get_data()
    artikul = data.get("artikul")
    chat_id = str(message.chat.id)

    async with aiohttp.ClientSession() as session:
        async with session.post(
            f"{API_URL}/subscriptions",
            headers=HEADERS,
            json={
                "artikul": artikul,
                "chat_id": chat_id,
                "frequency_minutes": frequency
            }
        ) as response:
            if response.status != 200:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.clear()
                await show_main_menu(message)
                return

            await message.answer(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {artikul}\n"
                f"‚è∞ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {message.text}\n\n"
                f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞."
            )

    await state.clear()
    await show_main_menu(message)

async def unsubscribe_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    async with aiohttp.ClientSession() as session:
        chat_id = str(message.chat.id)
        async with session.get(f"{API_URL}/subscriptions/user/{chat_id}", headers=HEADERS) as response:
            if response.status != 200:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await show_main_menu(message)
                return
            
            subscriptions = await response.json()
            if not subscriptions:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
                await show_main_menu(message)
                return

            keyboard = types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text=f"–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {sub['artikul']}")] for sub in subscriptions
                ] + [[types.KeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]],
                resize_keyboard=True
            )
            
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=keyboard)
            await state.set_state(Form.waiting_for_unsubscribe)

async def process_unsubscribe(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã"""
    if message.text == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await return_to_menu(message, state)
        return

    if not message.text.startswith("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç "):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    artikul = message.text.replace("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç ", "")
    chat_id = str(message.chat.id)

    async with aiohttp.ClientSession() as session:
        async with session.delete(
            f"{API_URL}/subscriptions/{artikul}/users/{chat_id}",
            headers=HEADERS
        ) as response:
            if response.status == 200:
                await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–æ–≤–∞—Ä–µ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {artikul}.")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()
    await show_main_menu(message) 