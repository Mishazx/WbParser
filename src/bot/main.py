import logging
import os
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.middleware import FSMContextMiddleware
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from fastapi import FastAPI, Request, HTTPException
import uvicorn
from pydantic import BaseModel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
BOT_API_TOKEN = os.getenv('BOT_TOKEN')
API_TOKEN = os.getenv('API_TOKEN')
API_URL = os.getenv('API_URL', 'http://app/api/v1')

logger.info(f"Initialized with API_URL: {API_URL}")
logger.info(f"Bot token present: {'Yes' if BOT_API_TOKEN else 'No'}")
logger.info(f"API token present: {'Yes' if API_TOKEN else 'No'}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
HEADERS = {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    'Authorization': f'Bearer {API_TOKEN}'
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(title="Telegram Bot API")

@app.on_event("startup")
async def startup_event():
    logger.info("Bot API starting up...")
    try:
        bot_info = await bot.get_me()
        logger.info(f"Bot connected successfully: @{bot_info.username}")
    except Exception as e:
        logger.error(f"Failed to initialize bot: {e}")
        raise

class PriceNotification(BaseModel):
    artikul: str
    old_price: float
    new_price: float
    product_name: str

class QuantityNotification(BaseModel):
    artikul: str
    old_quantity: int
    new_quantity: int
    product_name: str

@app.post("/api/v1/notify/price-change")
async def notify_price_change(notification: PriceNotification):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    logger.info(f"Received price change notification for artikul {notification.artikul}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —á–µ—Ä–µ–∑ API
    async with aiohttp.ClientSession() as session:
        url = f"{API_URL}/subscriptions/{notification.artikul}/users"
        logger.info(f"Fetching subscribers from: {url}")
        
        async with session.get(url, headers=HEADERS) as response:
            if response.status != 200:
                logger.error(f"Failed to get subscribers: HTTP {response.status}")
                raise HTTPException(status_code=500, detail="Failed to get subscribers")
            
            subscribers = await response.json()
            logger.info(f"Found {len(subscribers)} subscribers")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
            notifications_sent = 0
            for subscriber in subscribers:
                try:
                    chat_id = subscriber['chat_id']
                    price_diff = notification.new_price - notification.old_price
                    price_change = "—Å–Ω–∏–∑–∏–ª–∞—Å—å" if price_diff < 0 else "–ø–æ–≤—ã—Å–∏–ª–∞—Å—å"
                    percent_change = abs(price_diff / notification.old_price * 100)
                    
                    message = (
                        f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {notification.product_name}!\n\n"
                        f"–ê—Ä—Ç–∏–∫—É–ª: {notification.artikul}\n"
                        f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {notification.old_price:,.2f} ‚ÇΩ\n"
                        f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {notification.new_price:,.2f} ‚ÇΩ\n"
                        f"–¶–µ–Ω–∞ {price_change} –Ω–∞ {abs(price_diff):,.2f} ‚ÇΩ ({percent_change:.1f}%)\n\n"
                        f"üîó https://www.wildberries.ru/catalog/{notification.artikul}/detail.aspx"
                    )
                    
                    logger.info(f"Sending notification to chat_id: {chat_id}")
                    await bot.send_message(chat_id=chat_id, text=message)
                    notifications_sent += 1
                    logger.info(f"Successfully sent notification to chat_id: {chat_id}")
                except Exception as e:
                    logger.error(f"Failed to send notification to {chat_id}: {str(e)}")
            
            logger.info(f"Successfully sent {notifications_sent} notifications")
            return {"success": True, "notifications_sent": notifications_sent}

@app.post("/api/v1/notify/quantity-change")
async def notify_quantity_change(notification: QuantityNotification):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —á–µ—Ä–µ–∑ API
    async with aiohttp.ClientSession() as session:
        url = f"{API_URL}/subscriptions/{notification.artikul}/users"
        async with session.get(url, headers=HEADERS) as response:
            if response.status != 200:
                logger.error(f"Failed to get subscribers: HTTP {response.status}")
                raise HTTPException(status_code=500, detail="Failed to get subscribers")
            
            subscribers = await response.json()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
            notifications_sent = 0
            for subscriber in subscribers:
                try:
                    chat_id = subscriber['chat_id']
                    quantity_diff = notification.new_quantity - notification.old_quantity
                    quantity_change = "—É–≤–µ–ª–∏—á–∏–ª–æ—Å—å" if quantity_diff > 0 else "—É–º–µ–Ω—å—à–∏–ª–æ—Å—å"
                    percent_change = abs(quantity_diff / notification.old_quantity * 100) if notification.old_quantity > 0 else 100
                    
                    message = (
                        f"üì¶ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ {notification.product_name}!\n\n"
                        f"–ê—Ä—Ç–∏–∫—É–ª: {notification.artikul}\n"
                        f"–°—Ç–∞—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {notification.old_quantity:,} —à—Ç.\n"
                        f"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {notification.new_quantity:,} —à—Ç.\n"
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity_change} –Ω–∞ {abs(quantity_diff):,} —à—Ç. ({percent_change:.1f}%)\n\n"
                        f"üîó https://www.wildberries.ru/catalog/{notification.artikul}/detail.aspx"
                    )
                    
                    await bot.send_message(chat_id=chat_id, text=message)
                    notifications_sent += 1
                    logger.info(f"Quantity change notification sent to {chat_id}")
                except Exception as e:
                    logger.error(f"Failed to send notification to {chat_id}: {e}")
            
            return {"success": True, "notifications_sent": notifications_sent}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    waiting_for_artikul = State()
    waiting_for_subscription_artikul = State()
    waiting_for_frequency = State()
    waiting_for_unsubscribe = State()

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ")],
        [KeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")]
    ],
    resize_keyboard=True
)

frequency_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="1 –º–∏–Ω—É—Ç–∞")],
        [KeyboardButton(text="30 –º–∏–Ω—É—Ç")],
        [KeyboardButton(text="1 —á–∞—Å")],
        [KeyboardButton(text="3 —á–∞—Å–∞")],
        [KeyboardButton(text="6 —á–∞—Å–æ–≤")],
        [KeyboardButton(text="12 —á–∞—Å–æ–≤")],
        [KeyboardButton(text="24 —á–∞—Å–∞")],
        [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ")]
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
@dp.message(lambda message: message.text in ["–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–æ–≤–∞—Ä", "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"])
async def process_buttons(message: types.Message, state: FSMContext):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {message.text}")
    
    if message.text == "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.waiting_for_artikul)
    elif message.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–æ–≤–∞—Ä":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.waiting_for_subscription_artikul)
    elif message.text == "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏":
        chat_id = str(message.chat.id)
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è chat_id: {chat_id}")
        
        async with aiohttp.ClientSession() as session:
            url = f"{API_URL}/subscriptions/user/{chat_id}"
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –∫: {url}")
            
            try:
                async with session.get(url, headers=HEADERS) as response:
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {response.status}")
                    
                    if response.status != 200:
                        logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}")
                        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        return
                    
                    subscriptions = await response.json()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: {subscriptions}")
                    
                    if not subscriptions:
                        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
                        return

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ç–æ–≤–∞—Ä–µ
                    subscription_info = []
                    for sub in subscriptions:
                        artikul = sub["artikul"]
                        logger.info(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ: {artikul}")
                        
                        try:
                            async with session.post(
                                f"{API_URL}/products",
                                headers=HEADERS,
                                json={"artikul": artikul}
                            ) as product_response:
                                if product_response.status == 200:
                                    product = await product_response.json()
                                    subscription_info.append(
                                        f"üì¶ {product.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}\n"
                                        f"üìé –ê—Ä—Ç–∏–∫—É–ª: {artikul}\n"
                                        f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {product.get('price', '–ù/–î')} ‚ÇΩ\n"
                                        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.get('total_quantity', '–ù/–î')} —à—Ç.\n"
                                        f"üîó https://www.wildberries.ru/catalog/{artikul}/detail.aspx\n"
                                    )
                                else:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ {artikul}: {product_response.status}")
                                    subscription_info.append(
                                        f"üì¶ –¢–æ–≤–∞—Ä {artikul}\n"
                                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ\n"
                                    )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–≤–∞—Ä–∞ {artikul}: {e}")
                            subscription_info.append(
                                f"üì¶ –¢–æ–≤–∞—Ä {artikul}\n"
                                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
                            )

                    if subscription_info:
                        message_text = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n" + "\n".join(subscription_info)
                        message_text += "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unsubscribe"
                        await message.answer(message_text)
                    else:
                        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
@dp.message(Form.waiting_for_artikul)
async def process_artikul(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)
        await state.clear()
        return

    artikul = message.text
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ: {artikul}")
    await message.answer(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {artikul}")

    async with aiohttp.ClientSession() as session:
        url = f"{API_URL}/products"
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –∫: {url}")
        
        try:
            async with session.post(url, headers=HEADERS, json={"artikul": artikul}) as response:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ: {data}")
                    
                    product_info = (
                        f"üì¶ –¢–æ–≤–∞—Ä: {data.get('name')}\n"
                        f"üìé –ê—Ä—Ç–∏–∫—É–ª: {data.get('artikul')}\n"
                        f"üí∞ –¶–µ–Ω–∞: {data.get('price')} ‚ÇΩ\n"
                        f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {data.get('rating')}\n"
                        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data.get('total_quantity')} —à—Ç.\n"
                        f"üîó –°—Å—ã–ª–∫–∞: https://www.wildberries.ru/catalog/{data.get('artikul')}/detail.aspx"
                    )

                    link = f"https://www.wildberries.ru/catalog/{data.get('artikul')}/detail.aspx"
                    builder = InlineKeyboardBuilder()
                    builder.add(InlineKeyboardButton(
                        text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Wildberries",
                        url=link
                    ))

                    await message.answer(product_info, reply_markup=builder.as_markup())
                elif response.status == 404:
                    await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}")
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–≤–∞—Ä–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
async def send_price_notification(artikul: str, old_price: float, new_price: float, name: str):
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {artikul}")
    
    async with aiohttp.ClientSession() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        url = f"{API_URL}/subscriptions/{artikul}/users"
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {url}")
        
        try:
            async with session.get(url, headers=HEADERS) as response:
                if response.status != 200:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {artikul}: {response.status}")
                    return
                
                subscribers = await response.json()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
                
                if not subscribers:
                    logger.info(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {artikul}")
                    return
                
                price_diff = new_price - old_price
                price_change = "—É–≤–µ–ª–∏—á–∏–ª–∞—Å—å" if price_diff > 0 else "—É–º–µ–Ω—å—à–∏–ª–∞—Å—å"
                percent_change = abs(price_diff / old_price * 100)

                message = (
                    f"üîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã!\n\n"
                    f"üì¶ {name}\n"
                    f"üìé –ê—Ä—Ç–∏–∫—É–ª: {artikul}\n"
                    f"üí∞ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price:.2f} ‚ÇΩ\n"
                    f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price:.2f} ‚ÇΩ\n"
                    f"üìä –¶–µ–Ω–∞ {price_change} –Ω–∞ {abs(price_diff):.2f} ‚ÇΩ ({percent_change:.1f}%)\n\n"
                    f"üîó https://www.wildberries.ru/catalog/{artikul}/detail.aspx"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
                for subscriber in subscribers:
                    try:
                        chat_id = subscriber["chat_id"]
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                        await bot.send_message(chat_id=chat_id, text=message)
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscriber['chat_id']}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(Form.waiting_for_subscription_artikul)
async def process_subscription_artikul(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)
        await state.clear()
        return

    artikul = message.text
    await state.update_data(artikul=artikul)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{API_URL}/products", headers=HEADERS, json={"artikul": artikul}) as response:
            if response.status == 404:
                await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                await state.clear()
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)
                return
            elif response.status != 200:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.clear()
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)
                return
            
            data = await response.json()
            await message.answer(
                f"–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω:\n"
                f"üì¶ {data.get('name')}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:",
                reply_markup=frequency_keyboard
            )
            await state.set_state(Form.waiting_for_frequency)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
@dp.message(Form.waiting_for_frequency)
async def process_frequency(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)
        await state.clear()
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –º–∏–Ω—É—Ç—ã
    frequency_map = {
        "1 –º–∏–Ω—É—Ç–∞": 1,
        "30 –º–∏–Ω—É—Ç": 30,
        "1 —á–∞—Å": 60,
        "3 —á–∞—Å–∞": 180,
        "6 —á–∞—Å–æ–≤": 360,
        "12 —á–∞—Å–æ–≤": 720,
        "24 —á–∞—Å–∞": 1440
    }

    if message.text not in frequency_map:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    frequency = frequency_map[message.text]
    data = await state.get_data()
    artikul = data.get("artikul")
    chat_id = str(message.chat.id)

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    async with aiohttp.ClientSession() as session:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with session.post(
            f"{API_URL}/subscriptions",
            headers=HEADERS,
            json={
                "artikul": artikul,
                "chat_id": chat_id,
                "frequency_minutes": frequency
            }
        ) as response:
            if response.status != 200:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.clear()
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)
                return

            await message.answer(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {artikul}\n"
                f"‚è∞ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {message.text}\n\n"
                f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞."
            )

    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(Command("unsubscribe"))
async def unsubscribe_command(message: types.Message):
    async with aiohttp.ClientSession() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id = str(message.chat.id)
        async with session.get(f"{API_URL}/subscriptions/user/{chat_id}", headers=HEADERS) as response:
            if response.status != 200:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            subscriptions = await response.json()
            if not subscriptions:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text=f"–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {sub['artikul']}")] for sub in subscriptions
                ] + [[KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ")]],
                resize_keyboard=True
            )
            
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=keyboard)
            await state.set_state(Form.waiting_for_unsubscribe)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
@dp.message(Form.waiting_for_unsubscribe)
async def process_unsubscribe(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)
        await state.clear()
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    if not message.text.startswith("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç "):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    artikul = message.text.replace("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç ", "")
    chat_id = str(message.chat.id)

    async with aiohttp.ClientSession() as session:
        async with session.delete(
            f"{API_URL}/subscriptions/{artikul}/users/{chat_id}",
            headers=HEADERS
        ) as response:
            if response.status == 200:
                await message.answer(
                    f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–æ–≤–∞—Ä–µ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {artikul}.",
                    reply_markup=main_keyboard
                )
            else:
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=main_keyboard
                )

    await state.clear()

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ FastAPI —Å–µ—Ä–≤–µ—Ä
    import asyncio
    from hypercorn.asyncio import serve
    from hypercorn.config import Config

    config = Config()
    config.bind = ["0.0.0.0:8889"]
    
    await asyncio.gather(
        serve(app, config),
        dp.start_polling(bot, skip_updates=True)
    )

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
