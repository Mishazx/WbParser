import asyncio
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from fastapi import FastAPI
from hypercorn.asyncio import serve
from hypercorn.config import Config

from config import BOT_API_TOKEN, logger
from handlers import (
    send_welcome, menu_command, help_command, process_buttons,
    process_artikul, process_subscription_artikul, process_frequency,
    unsubscribe_command, process_unsubscribe, return_to_menu, Form
)
from router import router, set_bot

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ FastAPI
bot = Bot(token=BOT_API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI(
    title="Telegram Bot API",
    description="""
    API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.
    
    ## –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    
    * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
    * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    ## –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    
    –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
    ```
    Authorization: Bearer your-api-token
    ```
    """,
    version="1.0.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc"
)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
set_bot(bot)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ API
app.include_router(router)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
dp.message.register(send_welcome, Command("start"))
dp.message.register(menu_command, Command("menu"))
dp.message.register(help_command, Command("help"))
dp.message.register(help_command, lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
dp.message.register(unsubscribe_command, Command("unsubscribe"))

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
dp.message.register(process_buttons, lambda message: message.text in [
    "üì¶ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ",
    "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–æ–≤–∞—Ä",
    "üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
])
dp.message.register(return_to_menu, lambda message: message.text == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
dp.message.register(process_artikul, Form.waiting_for_artikul)
dp.message.register(process_subscription_artikul, Form.waiting_for_subscription_artikul)
dp.message.register(process_frequency, Form.waiting_for_frequency)
dp.message.register(process_unsubscribe, Form.waiting_for_unsubscribe)

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("Bot API starting up...")
    try:
        bot_info = await bot.get_me()
        logger.info(f"Bot connected successfully: @{bot_info.username}")
    except Exception as e:
        logger.error(f"Failed to initialize bot: {e}")
        raise

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("Bot API shutting down...")
    try:
        session = await bot.get_session()
        await session.close()
        logger.info("Bot session closed successfully")
    except Exception as e:
        logger.error(f"Error during shutdown: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    config = Config()
    config.bind = ["0.0.0.0:8889"]
    
    logger.info("Starting bot and FastAPI server...")
    try:
        await asyncio.gather(
            serve(app, config),
            dp.start_polling(bot, skip_updates=True)
        )
    except Exception as e:
        logger.error(f"Error during startup: {e}")
        raise
    finally:
        logger.info("Application shutdown complete")

if __name__ == '__main__':
    asyncio.run(main())
