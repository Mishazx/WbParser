import logging
import aiohttp
from fastapi import HTTPException
from pydantic import BaseModel
from typing import List

from config import API_URL, HEADERS, logger

class PriceNotification(BaseModel):
    artikul: str
    old_price: float
    new_price: float
    product_name: str

class QuantityNotification(BaseModel):
    artikul: str
    old_quantity: int
    new_quantity: int
    product_name: str

async def notify_price_change(notification: PriceNotification, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    logger.info(f"Received price change notification for artikul {notification.artikul}")
    
    async with aiohttp.ClientSession() as session:
        url = f"{API_URL}/subscriptions/{notification.artikul}/users"
        logger.info(f"Fetching subscribers from: {url}")
        
        async with session.get(url, headers=HEADERS) as response:
            if response.status != 200:
                logger.error(f"Failed to get subscribers: HTTP {response.status}")
                raise HTTPException(status_code=500, detail="Failed to get subscribers")
            
            subscribers = await response.json()
            logger.info(f"Found {len(subscribers)} subscribers")
            
            notifications_sent = 0
            for subscriber in subscribers:
                try:
                    chat_id = subscriber['chat_id']
                    price_diff = notification.new_price - notification.old_price
                    price_change = "—Å–Ω–∏–∑–∏–ª–∞—Å—å" if price_diff < 0 else "–ø–æ–≤—ã—Å–∏–ª–∞—Å—å"
                    percent_change = abs(price_diff / notification.old_price * 100)
                    
                    message = (
                        f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {notification.product_name}!\n\n"
                        f"–ê—Ä—Ç–∏–∫—É–ª: {notification.artikul}\n"
                        f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {notification.old_price:,.2f} ‚ÇΩ\n"
                        f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {notification.new_price:,.2f} ‚ÇΩ\n"
                        f"–¶–µ–Ω–∞ {price_change} –Ω–∞ {abs(price_diff):,.2f} ‚ÇΩ ({percent_change:.1f}%)\n\n"
                        f"üîó https://www.wildberries.ru/catalog/{notification.artikul}/detail.aspx"
                    )
                    
                    logger.info(f"Sending notification to chat_id: {chat_id}")
                    await bot.send_message(chat_id=chat_id, text=message)
                    notifications_sent += 1
                    logger.info(f"Successfully sent notification to chat_id: {chat_id}")
                except Exception as e:
                    logger.error(f"Failed to send notification to {chat_id}: {str(e)}")
            
            logger.info(f"Successfully sent {notifications_sent} notifications")
            return {"success": True, "notifications_sent": notifications_sent}

async def notify_quantity_change(notification: QuantityNotification, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    async with aiohttp.ClientSession() as session:
        url = f"{API_URL}/subscriptions/{notification.artikul}/users"
        async with session.get(url, headers=HEADERS) as response:
            if response.status != 200:
                logger.error(f"Failed to get subscribers: HTTP {response.status}")
                raise HTTPException(status_code=500, detail="Failed to get subscribers")
            
            subscribers = await response.json()
            
            notifications_sent = 0
            for subscriber in subscribers:
                try:
                    chat_id = subscriber['chat_id']
                    quantity_diff = notification.new_quantity - notification.old_quantity
                    quantity_change = "—É–≤–µ–ª–∏—á–∏–ª–æ—Å—å" if quantity_diff > 0 else "—É–º–µ–Ω—å—à–∏–ª–æ—Å—å"
                    percent_change = abs(quantity_diff / notification.old_quantity * 100) if notification.old_quantity > 0 else 100
                    
                    message = (
                        f"üì¶ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ {notification.product_name}!\n\n"
                        f"–ê—Ä—Ç–∏–∫—É–ª: {notification.artikul}\n"
                        f"–°—Ç–∞—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {notification.old_quantity:,} —à—Ç.\n"
                        f"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {notification.new_quantity:,} —à—Ç.\n"
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity_change} –Ω–∞ {abs(quantity_diff):,} —à—Ç. ({percent_change:.1f}%)\n\n"
                        f"üîó https://www.wildberries.ru/catalog/{notification.artikul}/detail.aspx"
                    )
                    
                    await bot.send_message(chat_id=chat_id, text=message)
                    notifications_sent += 1
                    logger.info(f"Quantity change notification sent to {chat_id}")
                except Exception as e:
                    logger.error(f"Failed to send notification to {chat_id}: {e}")
            
            return {"success": True, "notifications_sent": notifications_sent} 